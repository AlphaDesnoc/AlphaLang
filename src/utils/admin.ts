import { PermissionService } from '../firebase/permissions';

// M√©thode utilitaire pour d√©finir le premier owner
// √Ä utiliser une seule fois lors de la configuration initiale
export async function setupOwner(userEmail: string): Promise<void> {
  console.log('üîß Configuration du propri√©taire initial...');
  
  // Remplacez cette email par votre propre email
  const ADMIN_EMAIL = 'delta@gmail.com';
  
  if (userEmail !== ADMIN_EMAIL) {
    throw new Error('Email non autoris√© pour devenir propri√©taire');
  }
  
  // Cette fonction devrait √™tre appel√©e manuellement dans la console du navigateur
  // ou via un script d'administration une seule fois
  console.log('‚ö†Ô∏è Cette fonction doit √™tre appel√©e manuellement');
  console.log('üìß Email autoris√©:', ADMIN_EMAIL);
  console.log('');
  console.log('Pour d√©finir un utilisateur comme owner, ex√©cutez dans la console:');
  console.log('');
  console.log('// 1. Connectez-vous avec le compte admin');
  console.log('// 2. R√©cup√©rez l\'UID de l\'utilisateur:');
  console.log('const user = firebase.auth().currentUser;');
  console.log('console.log("UID:", user.uid);');
  console.log('');
  console.log('// 3. Utilisez cet UID pour d√©finir l\'owner:');
  console.log('await PermissionService.setOwner("USER_UID_HERE", "votre-email@example.com");');
}

// Fonction helper pour les d√©veloppeurs
export function showAdminInstructions(): void {
  console.log('üìã Instructions d\'administration AlphaLang');
  console.log('==========================================');
  console.log('');
  console.log('üîë Pour d√©finir un propri√©taire initial:');
  console.log('1. Modifiez ADMIN_EMAIL dans src/firebase/permissions.ts');
  console.log('2. Cr√©ez un compte avec cet email');
  console.log('3. Ouvrez la console du navigateur');
  console.log('4. Ex√©cutez: await PermissionService.setOwner(user.uid, "votre-email@example.com")');
  console.log('');
  console.log('üë• Gestion des utilisateurs:');
  console.log('- Owner: peut tout faire, y compris cr√©er des admins');
  console.log('- Admin: peut g√©rer les utilisateurs normaux, pas les owners');
  console.log('- User: utilisateur normal');
  console.log('');
  console.log('üîí Pages prot√©g√©es:');
  console.log('- /documentation: utilisateurs connect√©s seulement');
  console.log('- /exercises: utilisateurs connect√©s seulement');
  console.log('- /exercise-workspace: utilisateurs connect√©s seulement');
  console.log('- /account: utilisateurs connect√©s seulement');
  console.log('- /admin: admins et owners seulement');
  console.log('');
  console.log('üí° Pour tester les permissions:');
  console.log('1. Cr√©ez plusieurs comptes');
  console.log('2. D√©finissez un owner');
  console.log('3. Utilisez /admin pour changer les r√¥les');
}

// Exporter les fonctions pour qu'elles soient disponibles globalement en dev
if (typeof window !== 'undefined') {
  (window as any).setupOwner = setupOwner;
  (window as any).showAdminInstructions = showAdminInstructions;
}
